{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport * as actions from '../../actions/questionwebservice';\nimport * as sportsapi from '../../../api/sportsapi';\n\nfunction* getQuestions() {\n  try {\n    const result = yield call(sportsapi.getQuestions);\n\n    if (result && result.response_code === 0) {\n      yield put(actions.getQuestionsSuccess(result));\n    } else {\n      yield put(actions.getQuestiondFailure(result));\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function* watchGetQuestionsRequest() {\n  yield takeEvery(actions.Types.GET_QUESTIONS_REQUEST, getQuestions);\n}","map":{"version":3,"sources":["/Users/aureliuscalliste/Documents/CODE/GitHubRepos/dashboard/dashboard/WebTechTest-master/src/redux/sagas/questions/index.ts"],"names":["takeEvery","call","put","actions","sportsapi","getQuestions","result","response_code","getQuestionsSuccess","getQuestiondFailure","error","console","watchGetQuestionsRequest","Types","GET_QUESTIONS_REQUEST"],"mappings":"AAAA,SACEA,SADF,EACaC,IADb,EACmBC,GADnB,QAEO,oBAFP;AAGA,OAAO,KAAKC,OAAZ,MAAyB,kCAAzB;AACA,OAAO,KAAKC,SAAZ,MAA2B,wBAA3B;;AAEA,UAAUC,YAAV,GAAyB;AACvB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAML,IAAI,CAACG,SAAS,CAACC,YAAX,CAAzB;;AAEA,QAAIC,MAAM,IAAIA,MAAM,CAACC,aAAP,KAAyB,CAAvC,EAA0C;AACxC,YAAML,GAAG,CAACC,OAAO,CAACK,mBAAR,CAA4BF,MAA5B,CAAD,CAAT;AACD,KAFD,MAEO;AACL,YAAMJ,GAAG,CAACC,OAAO,CAACM,mBAAR,CAA4BH,MAA5B,CAAD,CAAT;AACD;AACF,GARD,CAQE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF;;AAED,OAAO,UAAUE,wBAAV,GAAqC;AAC1C,QAAMZ,SAAS,CAACG,OAAO,CAACU,KAAR,CAAcC,qBAAf,EAAsCT,YAAtC,CAAf;AACD","sourcesContent":["import {\r\n  takeEvery, call, put\r\n} from 'redux-saga/effects';\r\nimport * as actions from '../../actions/questionwebservice';\r\nimport * as sportsapi from '../../../api/sportsapi';\r\n\r\nfunction* getQuestions() {\r\n  try {\r\n    const result = yield call(sportsapi.getQuestions);\r\n\r\n    if (result && result.response_code === 0) {\r\n      yield put(actions.getQuestionsSuccess(result));\r\n    } else {\r\n      yield put(actions.getQuestiondFailure(result));\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport function* watchGetQuestionsRequest() {\r\n  yield takeEvery(actions.Types.GET_QUESTIONS_REQUEST, getQuestions);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}