{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas/rootSaga';\nimport * as sportwebservice from './actions/questionwebservice';\nconst initialQuizState = {\n  questions: []\n};\n\nfunction questionReduxReducer(state = initialQuizState, action) {\n  switch (action.type) {\n    case sportwebservice.Types.GET_QUESTIONS_SUCCESS:\n      return {\n        questions: [...action.payload.results, ...state.questions]\n      };\n\n    case sportwebservice.Types.DELETE_QUESTION_REQUEST:\n      return {\n        questions: [...state.questions.slice(0, action.payload.index), ...state.questions.slice(action.payload.index + 1)]\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst overallReducer = combineReducers({\n  quiz: questionReduxReducer\n}); // Sage Middleware is used for fetching external resources.\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(overallReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\nexport { store };","map":{"version":3,"sources":["/Users/aureliuscalliste/Documents/CODE/GitHubRepos/dashboard/dashboard/WebTechTest-master/src/redux/appReducer.ts"],"names":["createStore","combineReducers","applyMiddleware","createSagaMiddleware","rootSaga","sportwebservice","initialQuizState","questions","questionReduxReducer","state","action","type","Types","GET_QUESTIONS_SUCCESS","payload","results","DELETE_QUESTION_REQUEST","slice","index","overallReducer","quiz","sagaMiddleware","store","run"],"mappings":"AACA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AAEA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,OAAO,KAAKC,eAAZ,MAAiC,8BAAjC;AAQA,MAAMC,gBAA2B,GAAG;AAClCC,EAAAA,SAAS,EAAE;AADuB,CAApC;;AAIA,SAASC,oBAAT,CAA8BC,KAAK,GAAGH,gBAAtC,EAAwDI,MAAxD,EAAgE;AAI9D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,eAAe,CAACO,KAAhB,CAAsBC,qBAA3B;AACE,aAAO;AACLN,QAAAA,SAAS,EAAE,CACT,GAAGG,MAAM,CAACI,OAAP,CAAeC,OADT,EAET,GAAGN,KAAK,CAACF,SAFA;AADN,OAAP;;AAMF,SAAKF,eAAe,CAACO,KAAhB,CAAsBI,uBAA3B;AACE,aAAO;AACLT,QAAAA,SAAS,EAAE,CACT,GAAGE,KAAK,CAACF,SAAN,CAAgBU,KAAhB,CAAsB,CAAtB,EAAyBP,MAAM,CAACI,OAAP,CAAeI,KAAxC,CADM,EAET,GAAGT,KAAK,CAACF,SAAN,CAAgBU,KAAhB,CAAsBP,MAAM,CAACI,OAAP,CAAeI,KAAf,GAAuB,CAA7C,CAFM;AADN,OAAP;;AAMF;AACE,aAAOT,KAAP;AAhBJ;AAkBD;;AAED,MAAMU,cAAc,GAAGlB,eAAe,CAAC;AACrCmB,EAAAA,IAAI,EAAEZ;AAD+B,CAAD,CAAtC,C,CAIA;;AACA,MAAMa,cAAc,GAAGlB,oBAAoB,EAA3C;AAEA,MAAMmB,KAAK,GAAGtB,WAAW,CACvBmB,cADuB,EAEvBjB,eAAe,CAACmB,cAAD,CAFQ,CAAzB;AAKAA,cAAc,CAACE,GAAf,CAAmBnB,QAAnB;AAEA,SAASkB,KAAT","sourcesContent":["\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\n\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootSaga from './sagas/rootSaga';\r\n\r\nimport * as sportwebservice from './actions/questionwebservice';\r\n\r\nimport { Question } from '../types/Question';\r\n\r\n\r\nexport interface QuizState {\r\n  questions: Question[]\r\n}\r\nconst initialQuizState: QuizState = {\r\n  questions: [],\r\n};\r\n\r\nfunction questionReduxReducer(state = initialQuizState, action) {\r\n\r\n\r\n\r\n  switch (action.type) {\r\n    case sportwebservice.Types.GET_QUESTIONS_SUCCESS:\r\n      return {\r\n        questions: [\r\n          ...action.payload.results,\r\n          ...state.questions\r\n        ]\r\n      };\r\n    case sportwebservice.Types.DELETE_QUESTION_REQUEST:\r\n      return {\r\n        questions: [\r\n          ...state.questions.slice(0, action.payload.index),\r\n          ...state.questions.slice(action.payload.index + 1)\r\n        ],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst overallReducer = combineReducers({\r\n  quiz: questionReduxReducer\r\n});\r\n\r\n// Sage Middleware is used for fetching external resources.\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  overallReducer,\r\n  applyMiddleware(sagaMiddleware)\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport { store };\r\n"]},"metadata":{},"sourceType":"module"}